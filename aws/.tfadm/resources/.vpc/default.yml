extends: vpc
properties:
  tags:
    inherit: true
  dhcp_options_name:
    description: DHCP option set name.
    ignore: true
    inherit: true
    value: '{vpc_name}'
  internet_gateway_name:
    description: The name of the Internet Gateway.
    ignore: true
    inherit: true
    value: '{vpc_name}'
  subnet_name:
    description: The name of the subnet.
    ignore: true
    inherit: true
    value: dmz
events:
  onchange:
    update:
      dhcp-options: {}
      prefix-list:
        args:
          address_family: IPv4
          hostname: '{region}.{vpc_name}'
        unset: cidr_block
      .vpc/prefix-list-entry:
        args:
          address_family: IPv4
          hostname: '{region}.{vpc_name}'
        when: cidr_block is defined
      internet-gateway: {}
      vpc-dhcp-association: {}
      vpc-cidr-association:
        - args:
            cidr_block: '${cidrsubnet([for parts in [split("/", aws_vpc.this.cidr_block)]: join("/", [parts[0], parts[1] - 2])][0], 2, 1)}'
        - args:
            cidr_block: '${cidrsubnet([for parts in [split("/", aws_vpc.this.cidr_block)]: join("/", [parts[0], parts[1] - 2])][0], 2, 2)}'
      security-group:
        - args:
            security_group_name: default
        - args:
            security_group_name: ingress
      security-group-rule:
        - args:
            cidr_ipv4: 0.0.0.0/0
            ip_protocol: all
            security_group_name: ingress
            type: out
        - args:
            cidr_ipv4: 0.0.0.0/0
            from_port: 80
            ip_protocol: tcp
            security_group_name: ingress
            type: in
        - args:
            cidr_ipv4: 0.0.0.0/0
            from_port: 443
            ip_protocol: tcp
            security_group_name: ingress
            type: in
      subnet:
        - args:
            az: a
            cidr_block: '${cidrsubnet(data.aws_vpc.this.cidr_block, 8, 0)}'
        - args:
            az: b
            cidr_block: '${cidrsubnet(data.aws_vpc.this.cidr_block, 8, 1)}'
        - args:
            az: c
            cidr_block: '${cidrsubnet(data.aws_vpc.this.cidr_block, 8, 2)}'
      nat-gateway:
        - args:
            az: a
            nat_gateway_name: nat.a
            private_ip: '${{cidrhost(aws_subnet.{subnet_id_}.cidr_block, -2)}}'
        - args:
            az: b
            nat_gateway_name: nat.b
            private_ip: '${{cidrhost(aws_subnet.{subnet_id_}.cidr_block, -2)}}'
        - args:
            az: c
            nat_gateway_name: nat.c
            private_ip: '${{cidrhost(aws_subnet.{subnet_id_}.cidr_block, -2)}}'
      route-table:
        - args:
            route_table_name: main
        - args:
            route_table_name: a
        - args:
            route_table_name: b
        - args:
            route_table_name: c
      route:
        - args:
            destination_cidr_block: 0.0.0.0/0
            route_table_name: main
        - args:
            destination_cidr_block: 0.0.0.0/0
            nat_gateway_name: nat.a
            route_table_name: a
        - args:
            destination_cidr_block: 0.0.0.0/0
            nat_gateway_name: nat.b
            route_table_name: b
        - args:
            destination_cidr_block: 0.0.0.0/0
            nat_gateway_name: nat.c
            route_table_name: c
